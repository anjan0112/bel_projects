--! @file        pmc_ctrl_auto_pkg.vhd
--  DesignUnit   pmc_ctrl_auto
--! @author      A. Hahn <a.hahn@gsi.de>
--! @date        03/03/2015
--! @version     0.0.1
--! @copyright   2015 GSI Helmholtz Centre for Heavy Ion Research GmbH
--!

--! @brief AUTOGENERATED WISHBONE-SLAVE PACKAGE FOR pmc_ctrl.vhd
--!
--------------------------------------------------------------------------------
--! This library is free software; you can redistribute it and/or
--! modify it under the terms of the GNU Lesser General Public
--! License as published by the Free Software Foundation; either
--! version 3 of the License, or (at your option) any later version.
--!
--! This library is distributed in the hope that it will be useful,
--! but WITHOUT ANY WARRANTY; without even the implied warranty of
--! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
--! Lesser General Public License for more details.
--!
--! You should have received a copy of the GNU Lesser General Public
--! License along with this library. If not, see <http://www.gnu.org/licenses/>.
--------------------------------------------------------------------------------

-- ***********************************************************
-- ** WARNING - THIS IS AUTO-GENERATED CODE! DO NOT MODIFY! **
-- ***********************************************************
--
-- If you want to change the interface,
-- modify pmc_ctrl.xml and re-run 'python wbgenplus.py pmc_ctrl.xml' !

library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use work.wishbone_pkg.all;
package pmc_ctrl_auto_pkg is

   --+******************************************************************************************+
   --|  ------------------------------- WB Slaves - Adress Maps --------------------------------|
   --+******************************************************************************************+

   --| WBS Adr ------------------------------ slave --------------------------------------------|
      constant c_slave_HEX_SWITCH_GET        : natural   := 16#00#;  -- r  0x0000000f, Shows hex switch inputs
      constant c_slave_PUSH_BUTTON_GET       : natural   := 16#04#;  -- r  0x00000001, Shows status of the push button
      constant c_slave_HEX_SWITCH_CPLD_GET   : natural   := 16#08#;  -- r  0x0000000f, Shows hex switch inputs
      constant c_slave_PUSH_BUTTON_CPLD_GET  : natural   := 16#0c#;  -- r  0x00000001, Shows status of the push button
      constant c_slave_CLOCK_CONTROL_OE_RW   : natural   := 16#10#;  -- rw 0x00000001, External input clock output enable
      constant c_slave_LOGIC_CONTROL_OE_RW   : natural   := 16#14#;  -- rw 0x0001ffff, External logic analyzer output enable
      constant c_slave_LOGIC_OUTPUT_RW       : natural   := 16#18#;  -- rw 0x0001ffff, External logic analyzer output (write)
      constant c_slave_LOGIC_INPUT_GET       : natural   := 16#1c#;  -- r  0x0001ffff, External logic analyzer input (read)

   --+******************************************************************************************+
   --|  ------------------------- WB Slaves - Control Register Records -------------------------|
   --+******************************************************************************************+

   --| WBS Register Record ------------ slave --------------------------------------------------|
   
   type t_slave_regs_o is record
      CLOCK_CONTROL_OE  : std_logic_vector(1-1 downto 0);   -- External input clock output enable
      LOGIC_CONTROL_OE  : std_logic_vector(17-1 downto 0);  -- External logic analyzer output enable
      LOGIC_OUTPUT      : std_logic_vector(17-1 downto 0);  -- External logic analyzer output (write)
   end record t_slave_regs_o;

   type t_slave_regs_clk_sys_o is record
      CLOCK_CONTROL_OE  : std_logic_vector(1-1 downto 0);   -- External input clock output enable
      LOGIC_CONTROL_OE  : std_logic_vector(17-1 downto 0);  -- External logic analyzer output enable
      LOGIC_OUTPUT      : std_logic_vector(17-1 downto 0);  -- External logic analyzer output (write)
   end record t_slave_regs_clk_sys_o;

   type t_slave_regs_i is record
      STALL             : std_logic;                        -- Stall control for outside entity
      ERR               : std_logic;                        -- Error control for outside entity
      HEX_SWITCH        : std_logic_vector(4-1 downto 0);   -- Shows hex switch inputs
      PUSH_BUTTON       : std_logic_vector(1-1 downto 0);   -- Shows status of the push button
      HEX_SWITCH_CPLD   : std_logic_vector(4-1 downto 0);   -- Shows hex switch inputs
      PUSH_BUTTON_CPLD  : std_logic_vector(1-1 downto 0);   -- Shows status of the push button
      LOGIC_INPUT       : std_logic_vector(17-1 downto 0);  -- External logic analyzer input (read)
   end record t_slave_regs_i;

   type t_slave_regs_clk_sys_i is record
      STALL             : std_logic;                        -- Stall control for outside entity
      ERR               : std_logic;                        -- Error control for outside entity
      HEX_SWITCH        : std_logic_vector(4-1 downto 0);   -- Shows hex switch inputs
      PUSH_BUTTON       : std_logic_vector(1-1 downto 0);   -- Shows status of the push button
      HEX_SWITCH_CPLD   : std_logic_vector(4-1 downto 0);   -- Shows hex switch inputs
      PUSH_BUTTON_CPLD  : std_logic_vector(1-1 downto 0);   -- Shows status of the push button
      LOGIC_INPUT       : std_logic_vector(17-1 downto 0);  -- External logic analyzer input (read)
   end record t_slave_regs_clk_sys_i;

   --| Component ----------------------- pmc_ctrl_auto -----------------------------------------|
   component pmc_ctrl_auto is
   Port(
      clk_sys_i            : in  std_logic;
      rst_n_i              : in  std_logic;

      slave_regs_clk_sys_o : out t_slave_regs_clk_sys_o;
      slave_regs_clk_sys_i : in  t_slave_regs_clk_sys_i;
      slave_i              : in  t_wishbone_slave_in;
      slave_o              : out t_wishbone_slave_out
      
   );
   end component;

   constant c_pmc_ctrl_slave_sdb : t_sdb_device := (
   abi_class     => x"0000", -- undocumented device
   abi_ver_major => x"01",
   abi_ver_minor => x"00",
   wbd_endian    => c_sdb_endian_big,
   wbd_width     => x"7", -- 8/16/32-bit port granularity
   sdb_component => (
   addr_first    => x"0000000000000000",
   addr_last     => x"000000000000001f",
   product => (
   vendor_id     => x"0000000000000651",
   device_id     => x"98c59ec1",
   version       => x"00000001",
   date          => x"20150728",
   name          => "PMC_CONTROL_UNIT   ")));
   
end pmc_ctrl_auto_pkg;
package body pmc_ctrl_auto_pkg is
end pmc_ctrl_auto_pkg;
